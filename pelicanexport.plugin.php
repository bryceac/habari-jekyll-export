<?php

class JekyllExport extends Plugin
{
    const VERSION = '0.4';

    protected $export_dir = NULL;
    protected $template   = NULL;

    /**
     * Executes when the admin plugins page wants to know if plugins have configuration links to display.
     *
     * @param  array  $actions   An array of existing actions for the specified plugin id.
     * @param  string $plugin_id The string id of a plugin, generated by the system
     * @return array The array of actions to attach to the specified $plugin_id
     */
    public function filter_plugin_config( $actions, $plugin_id )
    {
        if ( $plugin_id == $this->plugin_id() ) {
            $actions[] = _t( 'Export Posts' );
            $actions[] = _t( 'Generate Rewrite Rules' );
        }

        return $actions;
    }

    /**
    * Respond to the user selecting an action on the plugin page
    *
    * @param string $plugin_id The string id of the acted-upon plugin
    * @param string $action    The action string supplied via the filter_plugin_config hook
    */
    public function action_plugin_ui( $plugin_id, $action )
    {
        if ( $plugin_id == $this->plugin_id() ) {
            switch( $action ) {
                case _t( 'Export Posts' ):
                     if ($this->export_posts()) {
                        $message = _t('Posts have been exported successfully.');
                    } else {
                        $message = _t('Unable to export posts.');
                    }

                    printf('<p>%s</p>', $message);
                    break;
                case _t( 'Generate Rewrite Rules' ):
                    printf('<code>%s</code>', $this->rewrite_rules());
                    break;
            }
        }
    }

    public function action_init()
    {
        Stack::add('admin_stylesheet', array('code { display:block;font-family:monospace;margin:3em 0 2em; }', 'screen'));
        $this->set_paths();
    }

    private function set_paths()
    {
        $this->export_dir = dirname(__FILE__).'/_posts';
        $this->template   = dirname(__FILE__).'/template.php';
    }

    /**
     * Prevents plugin activation if the permission check fails or if the
     * Jekyll template has not been created.
     * @param  boolean $ok   True if the plugin can be activated
     * @param  string  $file Plugin file
     * @return boolean
     */
    public function filter_activate_plugin( $ok, $file )
    {
        if ( Plugins::id_from_file($file) == Plugins::id_from_file(__FILE__) ) {

            $this->set_paths();

            if ( !$this->check_permissions() )
            {
                $message = _t( 'Pelican Export activation failed. Either the _posts directory does not exist or it is not writable by the web server.' );
                EventLog::log( $message );
                Session::error( $message );
                $ok = FALSE;
            }

            if ( !$this->check_template() )
            {
                $message = _t( 'Pelican Export activation failed. Either template.php does not exist or it is not readable by the web server.' );
                EventLog::log( $message );
                Session::error( $message );
                $ok = FALSE;
            }
        }

        return $ok;
    }

    /**
     * Exports Habari posts to Pelican article HTML files.
     */
    private function export_posts()
    {
        foreach (Posts::get(array('content_type' => 'entry', 'nolimit' => TRUE)) as $post)
        {
            $filename = "$this->export_dir/"
                ."$post->slug.html";

            $permalink  = $post->slug;
            $published  = $post->status === Post::status('published') ? 'true' : 'false';
            $title      = htmlentities($post->title);
            $date       = $post->pubdate->text_format('{Y}-{m}-{d}');
            $content    = trim($post->content);

            $jtags = array();
            foreach($post->tags as $tag) {
                $jtags[] = $tag->term;
            }
            $jtags = implode(', ', $jtags);

            $data = str_replace(
                array('{permalink}', '{published}', '{title}', '{date}', '{content}', '{jtags}'),
                array($permalink, $published, $title, $date, $content, $jtags),
                file_get_contents($this->template)
            );

            if (!file_put_contents($filename, $data))
            {
                return FALSE;
            }
        }

        return TRUE;
    }

    /**
     * Generates a list of 301 redirects, using the default Jekyll permalink style.
     *
     * @return string
     */
    private function rewrite_rules()
    {
        $out = array();

        $out[] = '# Redirect Habari pages.';
        foreach (Posts::get(array('content_type' => 'page', 'nolimit' => TRUE)) as $page)
        {
            $out[] = sprintf('Redirect 301 /%s %s%s.html',
                $page->slug,
                URL::get('display_home'),
                $page->slug
            );
        }

        $out[] = "<br># Redirect Habari entries.";
        foreach (Posts::get(array('content_type' => 'entry', 'nolimit' => TRUE)) as $post)
        {
            $out[] = sprintf('Redirect 301 /%s %s%s/%s/%s/%s.html',
                $post->slug,
                URL::get('display_home'),
                $post->pubdate->text_format('{Y}'),
                $post->pubdate->text_format('{m}'),
                $post->pubdate->text_format('{d}'),
                $post->slug
            );
        }

        return implode('<br>', $out);
    }

    /**
     * Checks if the _posts directory exists and is writable.
     *
     * @return bool
     */
    private function check_permissions()
    {
        return is_dir($this->export_dir) && is_writable($this->export_dir);
    }

    /**
     * Checks that the template.php exists and is readable.
     *
     * @return bool
     */
    private function check_template()
    {
        return is_readable($this->template);
    }
}

?>
